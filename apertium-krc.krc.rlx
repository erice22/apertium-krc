# Firstly, we need to define what tags should be considered sentence delimiters. For this example, only full stop is set as delimiter.
# ============================================================================ #
#            A COMMENTARY ON FORMATTING OF MAJORITY OF RULES
#              (read: a wannabe FORMATTING GUIDELINES)
# ============================================================================ #

# Lines do not exceed 79 characters.
#
# Rule layout
# ===========
#
# There are two alternative layouts for writing a rule. An example for the
# first one (of course the body of the rule won't be commented out):
#
#        # INPUT: ^терістік/тер<v><tv><coop><ifi><p1><pl>/терістік<n><attr>/
#        #        терістік<n><nom>$ ^бетіндегі/бет<n><px3sp><loc><attr>/
#        #        бет<n><px3sp><loc><subst><nom>/$
#        # OUTPUT: [0]^терістік/терістік<n><attr>/терістік<n><nom>$
#                   ^бетіндегі/бет<n><px3sp><loc><attr>...$
#         REMOVE V IF
#                (0 PRE-N)
#                (1C N)
#        ;
#        # any additional comments here (if necessary)
#
# An abstract example of the second layout:
#
#        # An explanation of what the rule does (if it's not obvious from
#        # code!), a name or any other comment that clarifies its purpose
#         SELECT ABC IF
#                (0 DEF)
#                (1 GHI)
#        ;
#        ## A sentence with the [0]form the rule was written for.
#        ## (!) A corner-case-sentence: the rule mispredicted on it initially
#        ## but was modified accordingly (additional constraints etc.); or the
#        ## rule still mispredicts on it, but this kind of sentences aren't
#        ## that frequent. (Alternatively, place the corner-case sentence on
#        ## the same line as the additional constraint).
#
# The first layout is more appropriate when you come up with a rule inductively
# (i.e. you see a sentence badly translated because of errors in disambiguation
# and want to fix it), the second one when you arrived at it deductively. E.g:
#
#        # Participle appears immediately before a verb (verbal adverb doesn't)
#         REMOVE Participle IF
#                (NOT 1C V OR Vaux)
#        ;
#        ## Есік [0]ашып, ол үйге кірді.
#
# In context of apertium-kaz, the difference between a participle and a verbal
# adverb is that participle immediately precedes a verb and verbal adverb
# doesn't. We know this even without looking at tests, but it is a good idea
# to back up the rule with a test case.
#
# Sometimes you can't fully disambiguate a form with only one rule. In that
# case, several rules dealing with the same thing can be grouped together:
#
#         # What the rule does?
#          SELECT ABC IF
#                 (0 DEF)
#                 (1 KLM)
#         ;
#          REMOVE XYZ IF
#                 (0 DEF)
#                 (1 NOP)
#                 (2 QRS)
#          ;
#          ## Example sentences for both of the rules.
#          ## Another example sentence.
#
# Where a rule is placed?
# =======================

#                                   Any context involved?
#                                   /                   \
#                                 YES                   NO
#                                 /                       \
#                 Disambiguates a particular wordform?   "Heuristics" section
#                   /                         \          at the end of the file
#                 YES                         NO
#                 /                             \
#     "Wordform/lemma specific rules"        Readings of
#            section                        different POS?
#                                           /           \
#                                        YES            NO
#                                        /                \
#                                "POS marking"             \
#                              at the beginning             \
#                                                   Corresponding section
#                                                   ("Verbs", "Adjectives" etc.)

# ============================ #
# END OF FORMATTING GUIDELINES #
# ============================ #

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";
SOFT-DELIMITERS = "<,>" ;

SUBREADINGS = LTR ; # Alternate, left-to-right (main reading on the left)

# ============= #
# Tags and sets #
# ============= #

SETS

LIST BOS = (>>>) ;
LIST EOS = (<<<) ;

# First-level/Parts-of-speech tags
# ================================

LIST A = adj ;
LIST Adv = adv ;
LIST Pron = prn ;
LIST Pron-Pers = (prn pers) ;
LIST N = n ;
LIST IJ = ij ;
LIST Prop = np ;
LIST V = v ;
LIST Vaux = vaux ;
LIST Cop = cop ;
LIST Det = det ;
LIST CC = cnjcoo ;
LIST CS = cnjsub ;
LIST Interj = ij ;
LIST Pres = pres ;
LIST Num = num ;
LIST Post = post ;
LIST Postadv = postadv ;
LIST FinalClitic = mod_ass mod_emo mod qst emph ;
LIST Cm = cm ;
LIST Adv = adv ;
LIST Rquot = rquot ;
LIST Excl = "!" ;


# POS sub-categories
# ==================

LIST Pers = pers ;
LIST Interr = itg ;
LIST Dem = dem ;

LIST IV = iv ;
LIST TV = tv ;

LIST Pass = pass ;
LIST Caus = caus ;
LIST Coop = coop ;

# "Syntactic" tags
# ================

LIST Advl = advl ;
LIST Attr = attr ;
LIST Subst = subst ;
LIST N-LIKE = subst n np prn ; # Actually, see NOMINAL

# Morphosyntactic properties   # if you find yourself embracing the same tag in
# ==========================   # brackets over and over again, you may want to
                               # add it here

LIST Sg = sg ;
LIST Pl = pl ;

LIST Nom = nom ;
LIST Gen = gen ;
LIST Dat = dat ;
LIST Acc = acc ;
LIST Abl = abl ;
LIST Loc = loc ;
LIST Ins = ins ;

LIST P1 = p1 ;
LIST P2 = p2 ;
LIST P3 = p3 ;

LIST PersonalPossessives = px1sg px2sg px3sp px1pl px2pl ;

LIST Imper = imp ;

# Specific lexemes
# ==========================

LIST Year = "жылғы" "жыл" ;

LIST Colon = ":" ;

LIST Qayda = "қайда" ;

# Noun sets
# ==============

SET NGDAALI = Nom | Dat | Dat | Acc | Abl | Loc | Ins ;

# Adjective sets
# ==============

LIST A/Advl = (adj advl) ;
LIST A/Subst = (adj subst nom) ;
SET A1-Nom = A/Advl | A/Subst ;

# Verb sets
# =========

LIST FiniteVerb = pres aor past ifi ifi_evid fut fut_plan imp opt pih ;
LIST V-P3 = (v p3) (vaux p3) (cop p3) ;
LIST Gerund = ger ger_ppot ger_past ger_perf ger_impf ger_abs ;
SET V-NotGerund = V - Gerund ;
LIST Participle = prc_perf prc_impf prc_cond prc_vol prc_plan ;
LIST Prc-vol = prc_vol ;
LIST VerbalAdverb = gna_perf gna_cond gna_until gna_after ;
LIST VerbalAdjective = gpr_past gpr_fut gpr_pot gpr_impf ;
LIST FourAuxiliaries = "тұр" "жүр" "отыр" "жат" ;
LIST V-IV = (v iv) ;
LIST V-TV = (v tv) ;

LIST Err/Orth = err_orth ;

# All possible word categories
# ============================

SET WORD = N | V | A | Post | Postadv | Pron | Det | Adv | CC | CS | Interj |
           Num | ("\?") ;

SET PRE-N =  A | Det | Postadv | Num | (n gen) | (prn gen) | CC | (attr) ;

SET MARK =  Cm | ("\\") | ("\;") | ("\(") ;

SET WORDMARK = WORD | MARK ;

SET N-MOD = A | Det | Num | (n gen) | (prn gen) ;

SET ADJ-MOD = Postadv | Adv ;

SET NPMARK = N-MOD | ADJ-MOD ;

SET NOMINAL = N | Prop | Pron | Subst | Gerund ;

# Categories which cannot be part of a noun phrase
# ================================================

SET NPNH = WORDMARK - PRE-N ;
SET NPNHA = WORDMARK - PRE-N - Adv ;
SET NOT-ADV = WORDMARK - Adv ;

# Barriers
# ========

SET S-BOUNDARY = CS | Interr | EOS ;

SECTION
# If there is a singular noun to the right, I cannot be a verb or noun.
REMOVE (n) OR (v) IF (1 (n s)) ;

# If there is a conjunction followed by a certain cohort of the same CASE as me, choose me.
# SELECT $$Case IF (1 (cnjcoo) LINK 1C $$Case) ;

SELECT Gen IF
  (0 Gen OR Acc)
  (1 Num)
  (2 (px3sp)) ;


# Resources:
# http://visl.sdu.dk/cg3.html
# http://groups.google.com/group/constraint-grammar
# http://kevindonnelly.org.uk/2010/05/constraint-grammar-tutorial/
# https://wiki.apertium.org/wiki/Constraint_Grammar
# https://wiki.apertium.org/wiki/Apertium_and_Constraint_Grammar
